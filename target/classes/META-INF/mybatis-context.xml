<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">
		<!-- 위 xmlns(xml namespace):명칭  ==> 은 해당 태그를 썼을지 그 태그가 정확한지 아닌지 판별해주는 역할을 한다 -->
		<!-- 예를 들어 xmlna:context는 context:property-placeholder이 제대로 쓰였는지 판별해준다. 대충 그런 뉘앙스로 사용한다~ 라고만 알아두자. -->
		<!-- 아래 코드는 고정된 설정으로 이해하면 좋고 못해도 가져다 쓰면된다. -->
		<context:property-placeholder location="classpath:config/mysql.properties"/> <!-- 데이터베이스 연결 정보를 가진 .properties 확장자 파일을 모든 곳에서 알 수 있도록 설정 -->
		<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="location">
				<value>classpath:config/mysql.properties</value> <!-- classpath 는 src/main/resources/를 말한다 -->
			</property>
		</bean>
		<!-- dataSourceSpied 기능을 위해 추가 시작 -->
		<bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        	<property name="driverClassName" value="${jdbc.driver}"></property>
			<property name="url" value="${jdbc.url}"></property>
			<property name="username" value="${jdbc.username}"></property>
			<property name="password" value="${jdbc.password}"></property>
    	</bean>
		
		<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
			<constructor-arg ref="dataSourceSpied" />
        	<property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
                <property name="loggingType" value="MULTI_LINE" />
                <property name="sqlPrefix" value="SQL         :  "/>
            </bean>
        </property>
		</bean>
		<!-- dataSourceSpied 기능을 위해 추가 끝 -->
		
		<!-- 자바로 따지면 -->
		<!-- DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(dataSource) -->
		<!-- dataSource는 위에 있는 내가 사용할 DB정보를 가진 bean 객체를 뜻한다. (지금은 dataSourceSpied의 property로 되어있지만 dataSource안에 포함되어있다!) -->
		<!-- 트랜잭션은 프록시 패턴을 쓴다. -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/>
		</bean>
		
		<!-- bean으로 sqlSessionFactory클래스의 객체를 만들어 놓는다. -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"/> 
			<!-- 매핑 할 xml파일이 있는 패키지 경로를 설정한다. -->
			<property name="mapperLocations" value="classpath:com/rainbow/web/mapper/*.xml"/>
		</bean>
		<!-- constructor은 생성자 arg는 아규먼트 즉 매개변수를 말한다. -->
		<!-- Template sqlSession = new sqlSession(sqlSessionFactory) -->
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
			<constructor-arg index="0" ref="sqlSessionFactory"/>
		</bean>
</beans>